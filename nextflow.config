/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/gwas Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/
env {
    GOTO_NUM_THREADS     = 1
    OPENBLAS_NUM_THREADS = 1
    OMP_NUM_THREADS      = 1
}

// Global default params, used in configs
params {

    // Required options
    input                      = null
    outdir                     = null
    trait                      = null

    // Other options
    bakta_db                   = null
    variants_to_plot           = "filtered" // One of: 'all', 'significant', 'filtered'
    bed                        = null
    clusters                   = null
    variants                   = null
    tree                       = null

    // Only options
    only_annotate              = false

    // Skip options
    skip_annotate              = false
    skip_extract               = false
    skip_collect               = false    
    skip_cluster               = false
    skip_defrag                = false
    skip_summarize             = false
    skip_align                 = false
    skip_structural            = false
    skip_snps                  = false
    skip_presence_absence      = false
    skip_unitigs               = false
    skip_combine               = false
    skip_tree                  = false
    skip_gwas                  = false
    skip_manhattan             = false
    skip_heatmap               = false
    
    // Module options
    annotate_args              = null
    extract_args               = null
    cluster_args               = null
    defrag_args                = null
    align_args                 = null
    structural_args            = null
    snps_args                  = null
    tree_args                  = null
    gwas_args                  = null
    manhattan_args             = null
    heatmap_args               = null

    // Boilerplate options
    publish_dir_mode           = 'copy'
    monochrome_logs            = false
    monochromeLogs             = false
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_cpus   = 2
    max_memory = '8.GB'
    max_time   = '1.h'
    max_jobs   = 2


    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationShowHiddenParams       = true
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig "${projectDir}/conf/base.config"

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

executor {
    queueSize       = "${params.max_jobs}"
    pollInterval    = "5sec"
    submitRateLimit = "20sec"
}

process {
  maxForks      = "${params.max_jobs}"
  maxRetries    = 2
  errorStrategy = { (task.attempt <= process.maxRetries) ? 'retry' : 'finish' }
  // errorStrategy = { task.exitStatus != 1 && (task.attempt <= process.maxRetries) ? 'retry' : 'finish' }
}

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        channels               = ['conda-forge', 'bioconda']
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        channels               = ['conda-forge', 'bioconda']
        apptainer.enabled      = false
    }
    micromamba {
        conda.enabled          = true
        conda.useMamba         = false
        conda.useMicromamba    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        channels               = ['conda-forge', 'bioconda']
        apptainer.enabled      = false
    }    
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions      = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
    test      { includeConfig "${projectDir}/../data/test/nextflow.config" }
    tutorial_core  { includeConfig "${projectDir}/../data/tutorial_core/nextflow.config" }
    tutorial_pangenome  { includeConfig "${projectDir}/../data/tutorial_pangenome/nextflow.config" }
    streptococcus_pneumoniae { includeConfig "${projectDir}/../data/streptococcus_pneumoniae/nextflow.config" }

    slurm {

        executor.jobName         = { "\"gwas:${task.name}\"" }
        executor.queue           = { "${task.queue}" ?: 'Default' }
        executor.queueSize       = "${params.max_jobs}"

        process {
            executor = 'slurm'
            // Capture exit codes from upstream processes when piping
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }    
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3'        // Validation of pipeline parameters and creation of an input channel from a sample sheet
    //id 'nf-co2footprint@1.0.0-beta' // Estimates the energy consumption for each pipeline task
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'pangwas'
    author          = """Katherine Eaton"""
    homePage        = 'https://github.com/phac-nml/pangwas'
    description     = """A pipeline for pangenome wide association studies (panGWAS)"""
    mainScript      = 'nextflow/pipeline.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '0.1.0'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig "${projectDir}/conf/modules.config"

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
