/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    conda = "bioconda::pangwas=0.1.0"
    container = "${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?
        "https://depot.galaxyproject.org/singularity/pangwas:0.1.0" : "biocontainers/pangwas:0.1.0" }"


    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    /*
    ANNOTATE has an aggresive time cutoff (15 minutes) because bakta has an issue of stalling
    on the tmRNA step. 
    */
    withName: "ANNOTATE" {
        cpus   = { check_max( 10                 , 'cpus'    ) }
        memory = { check_max( 8.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 15.m  * task.attempt, 'time'    ) }
        maxRetries = 4        
        ext.args = { params.annotate_args ?: '' }
    }
    withName: "EXTRACT" {
        ext.args = { params.extract_args ?: '' }
    }
    withName: "CLUSTER" {
        ext.args = { params.defrag_args ?: '' }
    }
    withName: "DEFRAG" {
        ext.args = { params.defrag_args ?:'' }
    }
    withName: "ALIGN" {
        ext.args = { params.align_args ?: '' }
    }
    withName: "STRUCTURAL" {
        ext.args = { params.structural_args ?: '' }
    }
    withName: "SNPS" {
        ext.args = { params.snps_args ?: '' }
    }
    withName: "TREE" {
        ext.args = { params.tree_args ?: '' }
    }
    withName: "GWAS" {
        ext.args = { params.gwas_args ?: '' }
    }
    withName: "HEATMAP" {
        ext.args = { params.heatmap_args ?: '' }
    }
    withName: "MANHATTAN" {
        ext.args = { params.manhattan_args ?: '' }
    }
}
