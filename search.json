[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "panGWAS",
    "section": "",
    "text": "panGWAS is a pipeline for pangenome wide association studies. It reconstructs a pangenome from genomic assemblies, performs annotation and variant calling, estimates population structure, and models the association between genomic variants and variables of interest.\n\npanGWAS is implemented as a python package and CLI tool, that can be run on any POSIX-based system (Linux, Mac). We additionally provide a nextflow pipeline for end-to-end analysis.\nPlease see the extended documentation at: https://phac-nml.github.io/pangwas/\n\n\npanGWAS is distinct from other pangenome/GWAS workflows because it:\n\nProvides end-to-end analysis, from genomic assemblies to GWAS results.\nIncludes both coding and non-coding sequences in the pangenome.\nEnsures reproducible, deterministic results.\nOffers both sensible defaults and extensive customization of underlying tools.\nKeeps variants tightly linked to their annotations for easier interpretation at each stage.\n\n\n\n\npanGWAS performs the following analyses:\n\nAnnotate: Standardized annotation of genomes* with bakta.\nCluster: Identify genomic regions with shared homology using MMseqs2.\nAlign: Concatenate and align clusters with mafft.\nVariants: SNPs, presence absence, and structural variants.\nTree: Estimate a maximum-likelihood tree with IQ-TREE.\nGWAS: Model the association between variants and traits with pyseer.\nPlot: Manhattan plots, tree visualizations, heatmaps of signficant variants, QQ plots.\n\n* For non-bacterial genomes, you will need to bring your own gff annotations.\n\n\n\n\nInstall with conda:\nconda create -n pangwas -c conda-forge -c bioconda pangwas\nInstall with nextflow:\nnextflow pull phac-nml/pangwas\n\n\n\n\n\nFor more information, please see the Manual and Pipeline Documentation.\n\n\n\nIndividual commands can be run via the command-line interface:\npangwas extract --gff sample1.gff3\npangwas extract --gff sample2.gff3\npangwas collect --tsv sample1.tsv sample2.tsv\npangwas cluster --fasta sequences.fasta\n...\nFor an end-to-end example using the CLI, please see the Command-Line Interface example.\n\n\n\nIndividual commands can be run as python functions:\nimport pangwas\n\npangwas.extract(gff=\"sample1.gff3\")\npangwas.extract(gff=\"sample2.gff3\")\npangwas.collect(tsv=[\"sample1.tsv\", \"sample2.tsv\"])\npangwas.cluster(fasta=\"sequences.fasta\")\n...\nFor an end-to-end example using package, please see the Python Package example.\n\n\n\nAn end-to-end pipeline is provided via nextflow:\nnextflow run phac-nml/pangwas -profile test\nFor more examples, please see the tutorials. We recommend the Pyseer tutorial, which automates and reproduces the results from the penicillin resistance GWAS created by the pyseer authors:\n\n\n\n\n\npanGWAS is built and maintained by Katherine Eaton at the National Microbiology Laboratory (NML) of the Public Health Agency of Canada (PHAC).\nIf you have any questions, please email ktmeaton@gmail.com.\n\n\n\nKatherine Eaton💻 📖 🎨 🤔 🚇 🚧\n\n\n\nThis project follows the all-contributors specification (emoji key). Contributions of any kind welcome!\nSpecial thanks go to the developers of PPanGGOLiN. The Cluster and Align steps are heavily inspired by PPanGGOLiN, and in fact, panGWAS uses a modified version of PPanGGOLiN’s defragmentation algorithm.\n\n\n\n  Guillaume Gautreau   🎨 🤔\n\n\n  Jean Mainguy   🎨 🤔\n\n\n  Jérôme Arnoux   🎨 🤔\n\n\n  Jérôme Arnoux   🎨 🤔\n\n\n\nThanks go to the following people, who participated in the development of panGWAS:\n\n\n\n  Irene Martin   🎨\n🔣\n\n\n  Alyssa Golden   🎨\n🔣\n\n\n  Shelley Peterson   🎨\n🔣\n\n\n  Natalie Knox   🎨\n\n\n  Andrea Tyler   🎨\n\n\n\n\n  Darian Hole   ⚠️🛡️\n\n\n  Connor Chato   🎨🔬🤔\n\n\n\n\n\n\nCopyright 2025 Government of Canada\nLicensed under the Apache License, Version 2.0 (the “License”); you may not use this work except in compliance with the License. You may obtain a copy of the License at:\nhttp://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
  },
  {
    "objectID": "index.html#why-pangwas",
    "href": "index.html#why-pangwas",
    "title": "panGWAS",
    "section": "",
    "text": "panGWAS is distinct from other pangenome/GWAS workflows because it:\n\nProvides end-to-end analysis, from genomic assemblies to GWAS results.\nIncludes both coding and non-coding sequences in the pangenome.\nEnsures reproducible, deterministic results.\nOffers both sensible defaults and extensive customization of underlying tools.\nKeeps variants tightly linked to their annotations for easier interpretation at each stage."
  },
  {
    "objectID": "index.html#method",
    "href": "index.html#method",
    "title": "panGWAS",
    "section": "",
    "text": "panGWAS performs the following analyses:\n\nAnnotate: Standardized annotation of genomes* with bakta.\nCluster: Identify genomic regions with shared homology using MMseqs2.\nAlign: Concatenate and align clusters with mafft.\nVariants: SNPs, presence absence, and structural variants.\nTree: Estimate a maximum-likelihood tree with IQ-TREE.\nGWAS: Model the association between variants and traits with pyseer.\nPlot: Manhattan plots, tree visualizations, heatmaps of signficant variants, QQ plots.\n\n* For non-bacterial genomes, you will need to bring your own gff annotations."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "panGWAS",
    "section": "",
    "text": "Install with conda:\nconda create -n pangwas -c conda-forge -c bioconda pangwas\nInstall with nextflow:\nnextflow pull phac-nml/pangwas"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "panGWAS",
    "section": "",
    "text": "For more information, please see the Manual and Pipeline Documentation.\n\n\n\nIndividual commands can be run via the command-line interface:\npangwas extract --gff sample1.gff3\npangwas extract --gff sample2.gff3\npangwas collect --tsv sample1.tsv sample2.tsv\npangwas cluster --fasta sequences.fasta\n...\nFor an end-to-end example using the CLI, please see the Command-Line Interface example.\n\n\n\nIndividual commands can be run as python functions:\nimport pangwas\n\npangwas.extract(gff=\"sample1.gff3\")\npangwas.extract(gff=\"sample2.gff3\")\npangwas.collect(tsv=[\"sample1.tsv\", \"sample2.tsv\"])\npangwas.cluster(fasta=\"sequences.fasta\")\n...\nFor an end-to-end example using package, please see the Python Package example.\n\n\n\nAn end-to-end pipeline is provided via nextflow:\nnextflow run phac-nml/pangwas -profile test\nFor more examples, please see the tutorials. We recommend the Pyseer tutorial, which automates and reproduces the results from the penicillin resistance GWAS created by the pyseer authors:"
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "panGWAS",
    "section": "",
    "text": "panGWAS is built and maintained by Katherine Eaton at the National Microbiology Laboratory (NML) of the Public Health Agency of Canada (PHAC).\nIf you have any questions, please email ktmeaton@gmail.com.\n\n\n\nKatherine Eaton💻 📖 🎨 🤔 🚇 🚧\n\n\n\nThis project follows the all-contributors specification (emoji key). Contributions of any kind welcome!\nSpecial thanks go to the developers of PPanGGOLiN. The Cluster and Align steps are heavily inspired by PPanGGOLiN, and in fact, panGWAS uses a modified version of PPanGGOLiN’s defragmentation algorithm.\n\n\n\n  Guillaume Gautreau   🎨 🤔\n\n\n  Jean Mainguy   🎨 🤔\n\n\n  Jérôme Arnoux   🎨 🤔\n\n\n  Jérôme Arnoux   🎨 🤔\n\n\n\nThanks go to the following people, who participated in the development of panGWAS:\n\n\n\n  Irene Martin   🎨\n🔣\n\n\n  Alyssa Golden   🎨\n🔣\n\n\n  Shelley Peterson   🎨\n🔣\n\n\n  Natalie Knox   🎨\n\n\n  Andrea Tyler   🎨\n\n\n\n\n  Darian Hole   ⚠️🛡️\n\n\n  Connor Chato   🎨🔬🤔"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "panGWAS",
    "section": "",
    "text": "Copyright 2025 Government of Canada\nLicensed under the Apache License, Version 2.0 (the “License”); you may not use this work except in compliance with the License. You may obtain a copy of the License at:\nhttp://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
  },
  {
    "objectID": "tutorials/03_pyseer_tutorial.html",
    "href": "tutorials/03_pyseer_tutorial.html",
    "title": "Tutorial 03 - Pyseer Tutorial",
    "section": "",
    "text": "Tutorial 03 - Pyseer Tutorial\n\nDownload the tutorial data.\nnextflow pull phac-nml/pangwas\ncp -r ~/.nextflow/assets/phac-nml/pangwas/data .\nDecompress the data.\ngunzip data/tutorial_core/snps.Rtab.gz\ngunzip data/tutorial_pangenome/variants.Rtab.gz\ngunzip data/tutorial_pangenome/clusters.tsv.gz\nRun the core genome GWAS.\nnextflow run phac-nml/pangwas -profile tutorial_core --trait penicillin\nRun the pangenome GWAS.\nnextflow run phac-nml/pangwas -profile tutorial_pangenome --trait penicillin\n\nPenicillin resistance is primarily controlled by core genome genes, and we can see that the major genes are identical between a pangenome and core genome GWAS."
  },
  {
    "objectID": "tutorials/01_test.html",
    "href": "tutorials/01_test.html",
    "title": "Tutorial 01 - Test",
    "section": "",
    "text": "Tutorial 01 - Test\n\nRun the test data through a GWAS on the trait resistant.\nnextflow run phac-nml/pangwas -profile test --trait resistant\n\nThe samples sample4 and sample3 are the ones that are labelled as “resistant” and we can see the following variants are significantly associated with this trait:"
  },
  {
    "objectID": "manual/vcf_to_rtab.html",
    "href": "manual/vcf_to_rtab.html",
    "title": "vcf_to_rtab",
    "section": "",
    "text": "vcf_to_rtab\nConvert a VCF file to an Rtab file."
  },
  {
    "objectID": "manual/table_to_rtab.html",
    "href": "manual/table_to_rtab.html",
    "title": "table_to_rtab",
    "section": "",
    "text": "table_to_rtab\nConvert a TSV/CSV table to an Rtab file based on regex filters."
  },
  {
    "objectID": "manual/summarize.html",
    "href": "manual/summarize.html",
    "title": "summarize",
    "section": "",
    "text": "summarize"
  },
  {
    "objectID": "manual/snps.html",
    "href": "manual/snps.html",
    "title": "snps",
    "section": "",
    "text": "snps"
  },
  {
    "objectID": "manual/manhattan.html",
    "href": "manual/manhattan.html",
    "title": "manhattan",
    "section": "",
    "text": "manhattan\nPlot the distribution of variant p-values across the genome."
  },
  {
    "objectID": "manual/gwas.html",
    "href": "manual/gwas.html",
    "title": "gwas",
    "section": "",
    "text": "gwas\nRun genome-wide association study (GWAS) tests with pyseer."
  },
  {
    "objectID": "manual/defrag.html",
    "href": "manual/defrag.html",
    "title": "defrag",
    "section": "",
    "text": "defrag"
  },
  {
    "objectID": "manual/cluster.html",
    "href": "manual/cluster.html",
    "title": "cluster",
    "section": "",
    "text": "cluster"
  },
  {
    "objectID": "manual/annotate.html",
    "href": "manual/annotate.html",
    "title": "annotate",
    "section": "",
    "text": "Annotate genomic assemblies with bakta.\n\n\nThe purpose of the annotate subcommand is to provide a very simple wrapper around the bacterial genome annotator bakta. The main added value of using annotate is that it has a post-processing step where if fixes bad quotation marks in the output files (ex. ‘, ’), as these particular characters tend to crash downstream applications.\nThe output GFF file will the be used by the extract subcommand to break up the genome into informative regions for clustering.\nGenome annotation is the most complicated analysis and therefore most fragile part of the pipeline. If using the nextflow runtime, it is recommended to first run the annotation step in isolation with --only_annotate, which skips all downstream steps. After the annotation is successful, you can then include your new gff file paths in your samplesheet. In the case where nextflow fails to resume a previously run properly, this will prevent the pipeline from running annotation all over again.\n\n\n\nIf you are not bringing your own annotations, you will need to download a bakta annotation database.\npanGWAS has been verified with bakta CLI v1.9.2 and the v5.1 database. Specifically, v5.1 includes the amrfinderplus-db release v2023-11-15.1, which was the last release before their Database Schema changed. The full datbase can be downloaded with the following command:\n\n❗ WARNING: This download size is +30 GB. If you want to use the light database for testing (1 GB), replace db with db-light.\n\nmkdir -p database/bakta/\nwget -O database/bakta/db.tar.gz https://zenodo.org/records/10522951/files/db.tar.gz\ntar -xvf database/bakta/db.tar.gz -C database/bakta --strip-components 1\nThe database directory can then be tested with the following command:\npangwas annotate \\\n  --db database/bakta \\\n  --fasta data/test/sequences/sample1.fasta \\\n  --outdir sample1 \\\n  --threads 2\n\n\n\nThe annotate subcommand takes as input a FASTA file of genomic sequences and a path to a bakta database. Typically the FASTA file is in the form of contigs from a denovo or reference-guided assembly.\n\nPythonCLI\n\n\npangwas.annotate(fasta=\"sample1.fasta\", db=\"database/bakta\")\n\n\npangwas annotate --fasta sample1.fasta --db database/bakta\n\n\n\nWhile annotate will try to parse the sample identifier from the FASTA file name, it’s recommended to manually specify this information:\n\nPythonCLI\n\n\npangwas.annotate(fasta=\"sample1.fasta\", db=\"database/bakta\", sample=\"sample1\", prefix=\"sample1\")\n\n\npangwas annotate --fasta sample1.fasta --db database/bakta --sample sample1 --prefix sample1\n\n\n\nIf you would like to pass additional arguments to bakta, they can be specified like the following:\n\nPythonCLI\n\n\npangwas.annotate(fasta=\"sample1.fasta\", db=\"database/bakta\", args=\"--genus Streptococcus --species pneumoniae\")\n\n\npangwas annotate --fasta sample1.fasta --db database/bakta --genus Streptococcus --species pneumoniae\n\n\n\n\n\n\n\n\n\nfasta: Input FASTA sequences.\ndb: bakta database directory.\n\n\n\n\nOptional output arguments:\n\noutdir: Output directory.\nprefix: Output file prefix. If not provided, will be parsed from the fasta file name.\ntmp: Temporary directory.\n\nOptional arguments:\n\nsample Sample identifier. If not provided, will be parsed from the fasta file name.\nthreads CPU threads for bakta.\n\n\n\n\n\n\n\nThe following is a minimal example of annotating a Streptococcus pyogenes contig that contains the genes smeZ and speM separated by a short intergenic region.\n\nPythonCLI\n\n\npangwas.annotate(\n  fasta  = \"sample1.fasta\",\n  db     = \"database/bakta\",\n  locus  = \"sample1\",\n  outdir = \"sample1\",\n  args   = \"--genus Streptococcus --species pneumoniae\"\n)\n\n\npangwas annotate \\\n  --fasta sample1.fasta \\\n  --db database/bakta \\\n  --locus sample1 \\\n  --genus Streptococcus \\\n  --species pneumoniae\n\n\n\n\nInputOutput\n\n\n&gt;contig\nATGAAAAAAACAAAACTTATTTTTTCTTTTACTTCAATATTCATTGCAATAATTTCTCGTCCTGTGTTTG\nGATTAGAAGTAGATAATAATTCCCTTCTAAGGAATATCTATAGTACGATTGTGTATGAATATTCAGATAC\nAGTAATTGAGTTTAAAACCAGTCATAACTTAGTGACTAAGAAACTTGATGTTAGAGATGCTAGAGATTTT\nTTTATTAACTCCGAAATGGACGAATATGCAGCCAATGATTTTAAAGATGGAGATAAAATAGCTATGTTCT\nCCGTCCCATTTGATTGGAACTACTTGTCAGAAGGAAAAGTCATAGCATATACGTATGGTGGAATGACGCC\nTTATCAAGAAGAACCAATATCTAAAAATATCCCTGTTAATTTATGGATTAATGGAAAGCAGATCTCTGTT\nCCTTACAACGAAATATCAACTAACAAAACAACAGTTACAGCTCAAGAAATTGATCTAAAGGTTAGAAAAT\nTTTTAATATCACAACATCAATTATATTCTTCTGGTTCTAGCTACAAAAGTGGTAAATTAGTTTTTCATAC\nAAATGATAATTCAGATAAATATTCTCTCGATCTTTTCTATGTAGGATATAGAGATAAAGAAAGTATTTTT\nAAAGTATACAAAGACAATAAATCTTTCAATATAGATAAAATTGGGCATTTAGATATAGAAATTGACTCCT\nAA\nAGTGACGACATGCTGACTGTGCTCTGACGTTGACTGACTGA\nCTAATTTTTAGAAAAATCTTCGTTTAAGTAAATATCAAAGTGACTTACTTTACTCATATCAATCGTTTCATTATCTGT\nATAGTTAGGATGAGTGAATAAATCGGTAAACTTTGTTGTATTATCTTTATAATGAATTCCCCAATACCCTTTTTTACA\nAATTGAGTTATGTTCATATAACTTTATTCTATTATCGCTCATCAAACTTTTCCTAAGTCTAACATCAATTTCTTGAAA\nAGTTACAAACTTATTCTGAAATGTGATTTTATATTTTGATTGCTCTTTTAGCGGTATCTGTTCCCCAAAAATATTCAT\nATATATTGTTGAATCAAGTTTCTCTCTGTCACTTGTTCTTATCAAACCTCCATCAACATAATTATATTGTTCCTTACA\nTATCACACTGTAGGATTTTATTAGAGCATAAATATCAACTTCTTCTTCCTTAAAGCGTCTTTCTTGCGCTGGAGAAAC\nATTGCTAGATATAACTTTATTATAATTATCATCATCCCAGACTCTAGTTTTTTCATTCGTGTTAAATATTAACTGGGT\nGCCAATTTTCTTTGTTATCTTCATATTGGTTCTATTAATTACATCTTTCGTATAGATATTTTTTAATTCGCTATTAAC\nCAACACAGCATCTGAAAAGACACTCTCAGTAGTGTATAGAGCAAGCGATGCACACACAAGGAATAACAAAGTCAAGGT\nATTTTTTTTCAT\n\nLine wrapping is optional, and is used for illustrative purposes in this example to show the two separate genes present and the intergenic sequence between them.\n\n\n\n##gff-version 3\n##feature-ontology https://github.com/The-Sequence-Ontology/SO-Ontologies/blob/v3.1/so.obo\n# organism Streptococcus pyogenes\n# Annotated with Bakta\n# Software: v1.9.2\n# Database: v5.1, light\n# DOI: 10.1099/mgen.0.000685\n# URL: github.com/oschwengers/bakta\n##sequence-region sample1_1 1 1457\nsample1_1   Bakta   region  1   1457    .   +   .   ID=sample1_1;Name=sample1_1\nsample1_1   Prodigal    CDS 1   702 .   +   0   ID=AFLIOK_00005;Name=streptococcal mitogenic exotoxin SmeZ;locus_tag=AFLIOK_00005;product=streptococcal mitogenic exotoxin SmeZ;Dbxref=BlastRules:WP_010922705,SO:0001217,UniRef:UniRef50_Q9RQQ5;gene=smeZ\nsample1_1   Prodigal    CDS 744 1457    .   -   0   ID=AFLIOK_00010;Name=streptococcal pyrogenic exotoxin SpeM;locus_tag=AFLIOK_00010;product=streptococcal pyrogenic exotoxin SpeM;Dbxref=BlastRules:WP_011017838,SO:0001217,UniRef:UniRef50_Q8L3E1;gene=speM\n##FASTA\n&gt;sample1_1\nATGAAAAAAACAAAACTTATTTTTTCTTTTACTTCAATATTCATTGCAATAATTTCTCGT\nCCTGTGTTTGGATTAGAAGTAGATAATAATTCCCTTCTAAGGAATATCTATAGTACGATT\nGTGTATGAATATTCAGATACAGTAATTGAGTTTAAAACCAGTCATAACTTAGTGACTAAG\nAAACTTGATGTTAGAGATGCTAGAGATTTTTTTATTAACTCCGAAATGGACGAATATGCA\nGCCAATGATTTTAAAGATGGAGATAAAATAGCTATGTTCTCCGTCCCATTTGATTGGAAC\nTACTTGTCAGAAGGAAAAGTCATAGCATATACGTATGGTGGAATGACGCCTTATCAAGAA\nGAACCAATATCTAAAAATATCCCTGTTAATTTATGGATTAATGGAAAGCAGATCTCTGTT\nCCTTACAACGAAATATCAACTAACAAAACAACAGTTACAGCTCAAGAAATTGATCTAAAG\nGTTAGAAAATTTTTAATATCACAACATCAATTATATTCTTCTGGTTCTAGCTACAAAAGT\nGGTAAATTAGTTTTTCATACAAATGATAATTCAGATAAATATTCTCTCGATCTTTTCTAT\nGTAGGATATAGAGATAAAGAAAGTATTTTTAAAGTATACAAAGACAATAAATCTTTCAAT\nATAGATAAAATTGGGCATTTAGATATAGAAATTGACTCCTAAAGTGACGACATGCTGACT\nGTGCTCTGACGTTGACTGACTGACTAATTTTTAGAAAAATCTTCGTTTAAGTAAATATCA\nAAGTGACTTACTTTACTCATATCAATCGTTTCATTATCTGTATAGTTAGGATGAGTGAAT\nAAATCGGTAAACTTTGTTGTATTATCTTTATAATGAATTCCCCAATACCCTTTTTTACAA\nATTGAGTTATGTTCATATAACTTTATTCTATTATCGCTCATCAAACTTTTCCTAAGTCTA\nACATCAATTTCTTGAAAAGTTACAAACTTATTCTGAAATGTGATTTTATATTTTGATTGC\nTCTTTTAGCGGTATCTGTTCCCCAAAAATATTCATATATATTGTTGAATCAAGTTTCTCT\nCTGTCACTTGTTCTTATCAAACCTCCATCAACATAATTATATTGTTCCTTACATATCACA\nCTGTAGGATTTTATTAGAGCATAAATATCAACTTCTTCTTCCTTAAAGCGTCTTTCTTGC\nGCTGGAGAAACATTGCTAGATATAACTTTATTATAATTATCATCATCCCAGACTCTAGTT\nTTTTCATTCGTGTTAAATATTAACTGGGTGCCAATTTTCTTTGTTATCTTCATATTGGTT\nCTATTAATTACATCTTTCGTATAGATATTTTTTAATTCGCTATTAACCAACACAGCATCT\nGAAAAGACACTCTCAGTAGTGTATAGAGCAAGCGATGCACACACAAGGAATAACAAAGTC\nAAGGTATTTTTTTTCAT"
  },
  {
    "objectID": "manual/annotate.html#overview",
    "href": "manual/annotate.html#overview",
    "title": "annotate",
    "section": "",
    "text": "The purpose of the annotate subcommand is to provide a very simple wrapper around the bacterial genome annotator bakta. The main added value of using annotate is that it has a post-processing step where if fixes bad quotation marks in the output files (ex. ‘, ’), as these particular characters tend to crash downstream applications.\nThe output GFF file will the be used by the extract subcommand to break up the genome into informative regions for clustering.\nGenome annotation is the most complicated analysis and therefore most fragile part of the pipeline. If using the nextflow runtime, it is recommended to first run the annotation step in isolation with --only_annotate, which skips all downstream steps. After the annotation is successful, you can then include your new gff file paths in your samplesheet. In the case where nextflow fails to resume a previously run properly, this will prevent the pipeline from running annotation all over again."
  },
  {
    "objectID": "manual/annotate.html#database",
    "href": "manual/annotate.html#database",
    "title": "annotate",
    "section": "",
    "text": "If you are not bringing your own annotations, you will need to download a bakta annotation database.\npanGWAS has been verified with bakta CLI v1.9.2 and the v5.1 database. Specifically, v5.1 includes the amrfinderplus-db release v2023-11-15.1, which was the last release before their Database Schema changed. The full datbase can be downloaded with the following command:\n\n❗ WARNING: This download size is +30 GB. If you want to use the light database for testing (1 GB), replace db with db-light.\n\nmkdir -p database/bakta/\nwget -O database/bakta/db.tar.gz https://zenodo.org/records/10522951/files/db.tar.gz\ntar -xvf database/bakta/db.tar.gz -C database/bakta --strip-components 1\nThe database directory can then be tested with the following command:\npangwas annotate \\\n  --db database/bakta \\\n  --fasta data/test/sequences/sample1.fasta \\\n  --outdir sample1 \\\n  --threads 2"
  },
  {
    "objectID": "manual/annotate.html#usage",
    "href": "manual/annotate.html#usage",
    "title": "annotate",
    "section": "",
    "text": "The annotate subcommand takes as input a FASTA file of genomic sequences and a path to a bakta database. Typically the FASTA file is in the form of contigs from a denovo or reference-guided assembly.\n\nPythonCLI\n\n\npangwas.annotate(fasta=\"sample1.fasta\", db=\"database/bakta\")\n\n\npangwas annotate --fasta sample1.fasta --db database/bakta\n\n\n\nWhile annotate will try to parse the sample identifier from the FASTA file name, it’s recommended to manually specify this information:\n\nPythonCLI\n\n\npangwas.annotate(fasta=\"sample1.fasta\", db=\"database/bakta\", sample=\"sample1\", prefix=\"sample1\")\n\n\npangwas annotate --fasta sample1.fasta --db database/bakta --sample sample1 --prefix sample1\n\n\n\nIf you would like to pass additional arguments to bakta, they can be specified like the following:\n\nPythonCLI\n\n\npangwas.annotate(fasta=\"sample1.fasta\", db=\"database/bakta\", args=\"--genus Streptococcus --species pneumoniae\")\n\n\npangwas annotate --fasta sample1.fasta --db database/bakta --genus Streptococcus --species pneumoniae"
  },
  {
    "objectID": "manual/annotate.html#parameters",
    "href": "manual/annotate.html#parameters",
    "title": "annotate",
    "section": "",
    "text": "fasta: Input FASTA sequences.\ndb: bakta database directory.\n\n\n\n\nOptional output arguments:\n\noutdir: Output directory.\nprefix: Output file prefix. If not provided, will be parsed from the fasta file name.\ntmp: Temporary directory.\n\nOptional arguments:\n\nsample Sample identifier. If not provided, will be parsed from the fasta file name.\nthreads CPU threads for bakta."
  },
  {
    "objectID": "manual/annotate.html#examples",
    "href": "manual/annotate.html#examples",
    "title": "annotate",
    "section": "",
    "text": "The following is a minimal example of annotating a Streptococcus pyogenes contig that contains the genes smeZ and speM separated by a short intergenic region.\n\nPythonCLI\n\n\npangwas.annotate(\n  fasta  = \"sample1.fasta\",\n  db     = \"database/bakta\",\n  locus  = \"sample1\",\n  outdir = \"sample1\",\n  args   = \"--genus Streptococcus --species pneumoniae\"\n)\n\n\npangwas annotate \\\n  --fasta sample1.fasta \\\n  --db database/bakta \\\n  --locus sample1 \\\n  --genus Streptococcus \\\n  --species pneumoniae\n\n\n\n\nInputOutput\n\n\n&gt;contig\nATGAAAAAAACAAAACTTATTTTTTCTTTTACTTCAATATTCATTGCAATAATTTCTCGTCCTGTGTTTG\nGATTAGAAGTAGATAATAATTCCCTTCTAAGGAATATCTATAGTACGATTGTGTATGAATATTCAGATAC\nAGTAATTGAGTTTAAAACCAGTCATAACTTAGTGACTAAGAAACTTGATGTTAGAGATGCTAGAGATTTT\nTTTATTAACTCCGAAATGGACGAATATGCAGCCAATGATTTTAAAGATGGAGATAAAATAGCTATGTTCT\nCCGTCCCATTTGATTGGAACTACTTGTCAGAAGGAAAAGTCATAGCATATACGTATGGTGGAATGACGCC\nTTATCAAGAAGAACCAATATCTAAAAATATCCCTGTTAATTTATGGATTAATGGAAAGCAGATCTCTGTT\nCCTTACAACGAAATATCAACTAACAAAACAACAGTTACAGCTCAAGAAATTGATCTAAAGGTTAGAAAAT\nTTTTAATATCACAACATCAATTATATTCTTCTGGTTCTAGCTACAAAAGTGGTAAATTAGTTTTTCATAC\nAAATGATAATTCAGATAAATATTCTCTCGATCTTTTCTATGTAGGATATAGAGATAAAGAAAGTATTTTT\nAAAGTATACAAAGACAATAAATCTTTCAATATAGATAAAATTGGGCATTTAGATATAGAAATTGACTCCT\nAA\nAGTGACGACATGCTGACTGTGCTCTGACGTTGACTGACTGA\nCTAATTTTTAGAAAAATCTTCGTTTAAGTAAATATCAAAGTGACTTACTTTACTCATATCAATCGTTTCATTATCTGT\nATAGTTAGGATGAGTGAATAAATCGGTAAACTTTGTTGTATTATCTTTATAATGAATTCCCCAATACCCTTTTTTACA\nAATTGAGTTATGTTCATATAACTTTATTCTATTATCGCTCATCAAACTTTTCCTAAGTCTAACATCAATTTCTTGAAA\nAGTTACAAACTTATTCTGAAATGTGATTTTATATTTTGATTGCTCTTTTAGCGGTATCTGTTCCCCAAAAATATTCAT\nATATATTGTTGAATCAAGTTTCTCTCTGTCACTTGTTCTTATCAAACCTCCATCAACATAATTATATTGTTCCTTACA\nTATCACACTGTAGGATTTTATTAGAGCATAAATATCAACTTCTTCTTCCTTAAAGCGTCTTTCTTGCGCTGGAGAAAC\nATTGCTAGATATAACTTTATTATAATTATCATCATCCCAGACTCTAGTTTTTTCATTCGTGTTAAATATTAACTGGGT\nGCCAATTTTCTTTGTTATCTTCATATTGGTTCTATTAATTACATCTTTCGTATAGATATTTTTTAATTCGCTATTAAC\nCAACACAGCATCTGAAAAGACACTCTCAGTAGTGTATAGAGCAAGCGATGCACACACAAGGAATAACAAAGTCAAGGT\nATTTTTTTTCAT\n\nLine wrapping is optional, and is used for illustrative purposes in this example to show the two separate genes present and the intergenic sequence between them.\n\n\n\n##gff-version 3\n##feature-ontology https://github.com/The-Sequence-Ontology/SO-Ontologies/blob/v3.1/so.obo\n# organism Streptococcus pyogenes\n# Annotated with Bakta\n# Software: v1.9.2\n# Database: v5.1, light\n# DOI: 10.1099/mgen.0.000685\n# URL: github.com/oschwengers/bakta\n##sequence-region sample1_1 1 1457\nsample1_1   Bakta   region  1   1457    .   +   .   ID=sample1_1;Name=sample1_1\nsample1_1   Prodigal    CDS 1   702 .   +   0   ID=AFLIOK_00005;Name=streptococcal mitogenic exotoxin SmeZ;locus_tag=AFLIOK_00005;product=streptococcal mitogenic exotoxin SmeZ;Dbxref=BlastRules:WP_010922705,SO:0001217,UniRef:UniRef50_Q9RQQ5;gene=smeZ\nsample1_1   Prodigal    CDS 744 1457    .   -   0   ID=AFLIOK_00010;Name=streptococcal pyrogenic exotoxin SpeM;locus_tag=AFLIOK_00010;product=streptococcal pyrogenic exotoxin SpeM;Dbxref=BlastRules:WP_011017838,SO:0001217,UniRef:UniRef50_Q8L3E1;gene=speM\n##FASTA\n&gt;sample1_1\nATGAAAAAAACAAAACTTATTTTTTCTTTTACTTCAATATTCATTGCAATAATTTCTCGT\nCCTGTGTTTGGATTAGAAGTAGATAATAATTCCCTTCTAAGGAATATCTATAGTACGATT\nGTGTATGAATATTCAGATACAGTAATTGAGTTTAAAACCAGTCATAACTTAGTGACTAAG\nAAACTTGATGTTAGAGATGCTAGAGATTTTTTTATTAACTCCGAAATGGACGAATATGCA\nGCCAATGATTTTAAAGATGGAGATAAAATAGCTATGTTCTCCGTCCCATTTGATTGGAAC\nTACTTGTCAGAAGGAAAAGTCATAGCATATACGTATGGTGGAATGACGCCTTATCAAGAA\nGAACCAATATCTAAAAATATCCCTGTTAATTTATGGATTAATGGAAAGCAGATCTCTGTT\nCCTTACAACGAAATATCAACTAACAAAACAACAGTTACAGCTCAAGAAATTGATCTAAAG\nGTTAGAAAATTTTTAATATCACAACATCAATTATATTCTTCTGGTTCTAGCTACAAAAGT\nGGTAAATTAGTTTTTCATACAAATGATAATTCAGATAAATATTCTCTCGATCTTTTCTAT\nGTAGGATATAGAGATAAAGAAAGTATTTTTAAAGTATACAAAGACAATAAATCTTTCAAT\nATAGATAAAATTGGGCATTTAGATATAGAAATTGACTCCTAAAGTGACGACATGCTGACT\nGTGCTCTGACGTTGACTGACTGACTAATTTTTAGAAAAATCTTCGTTTAAGTAAATATCA\nAAGTGACTTACTTTACTCATATCAATCGTTTCATTATCTGTATAGTTAGGATGAGTGAAT\nAAATCGGTAAACTTTGTTGTATTATCTTTATAATGAATTCCCCAATACCCTTTTTTACAA\nATTGAGTTATGTTCATATAACTTTATTCTATTATCGCTCATCAAACTTTTCCTAAGTCTA\nACATCAATTTCTTGAAAAGTTACAAACTTATTCTGAAATGTGATTTTATATTTTGATTGC\nTCTTTTAGCGGTATCTGTTCCCCAAAAATATTCATATATATTGTTGAATCAAGTTTCTCT\nCTGTCACTTGTTCTTATCAAACCTCCATCAACATAATTATATTGTTCCTTACATATCACA\nCTGTAGGATTTTATTAGAGCATAAATATCAACTTCTTCTTCCTTAAAGCGTCTTTCTTGC\nGCTGGAGAAACATTGCTAGATATAACTTTATTATAATTATCATCATCCCAGACTCTAGTT\nTTTTCATTCGTGTTAAATATTAACTGGGTGCCAATTTTCTTTGTTATCTTCATATTGGTT\nCTATTAATTACATCTTTCGTATAGATATTTTTTAATTCGCTATTAACCAACACAGCATCT\nGAAAAGACACTCTCAGTAGTGTATAGAGCAAGCGATGCACACACAAGGAATAACAAAGTC\nAAGGTATTTTTTTTCAT"
  },
  {
    "objectID": "developers/developers.html",
    "href": "developers/developers.html",
    "title": "Developers",
    "section": "",
    "text": "panGWAS aims for &gt;=95% code coverage in it’s unit tests.\nUnit tests are defined in: tests/config/test_pangwas.yaml\nThe following are some examples of typical unit tests.\n\n# -----------------------------------------------------------------------------\n# extract\n\nextract:\n\n  # Basic unit test\n  - name: extract\n    params:\n    function: pangwas.extract\n    tags: [\"default\", \"cov\"]\n    args:\n        gff: \"{data_dir}/{sample}.gff3\"\n        min_len: \"{min_len}\"\n        outdir: \"{outdir}\"\n    output:\n        tsv: \"{outdir}/{prefix}.tsv\"\n    variables:   \n        data_dir: \"data/test/gff\"\n        min_len: \"10\"\n        outdir: \"tests/observed/test/extract\"\n        prefix: \"{sample}\"\n        sample:\n        - \"sample1\"\n        - \"sample2\"\n        - \"sample3\"\n        - \"sample4\"\n\n  # Unit test that is expected to fail with a particular error\n  - name: duplicate_contig_error\n    params:\n      tags: [\"cov\"]\n      function: pangwas.extract\n      args:\n        gff: \"{test_data}/{name}.gff3\"\n        outdir: \"{outdir}\"\n        prefix: \"{prefix}\"        \n      error_message: \"Duplicate contig ID found: sample2_pesticin\"\n      variables:\n        outdir: \"tests/observed/test/extract/{name}\"\n        prefix: \"{name}\"\n        test_data: \"tests/data\"\n\n# -----------------------------------------------------------------------------\n# cluster\n\ncluster:\n\n  # run the cluster function with various resources, and check that the\n  # results are the same every single time.\n  - name: reproducible\n    params:\n      tags: [\"reproducible\"]\n      function: pangwas.cluster\n      args:\n        fasta: \"{collect_dir}/sequences.fasta\"\n        outdir: \"{outdir}\"\n        tmp: \"{outdir}/tmp\"\n        memory: \"{memory}\"\n        threads: \"{threads}\"\n      output:\n        clusters: \"{outdir}/clusters.tsv\"\n        representative: \"{outdir}/representative.fasta\"\n      variables:\n        collect_dir: \"tests/observed/test/collect\"\n        outdir: \"tests/observed/test/cluster/t{threads}_mem{memory}\"\n        prefix: \"t{threads}_mem{memory}\"\n        threads:\n          - 1\n          - 2\n          - 4\n        memory:\n          - \"1G\"\n          - \"2G\"\n          - \"4G\""
  },
  {
    "objectID": "developers/developers.html#testing",
    "href": "developers/developers.html#testing",
    "title": "Developers",
    "section": "",
    "text": "panGWAS aims for &gt;=95% code coverage in it’s unit tests.\nUnit tests are defined in: tests/config/test_pangwas.yaml\nThe following are some examples of typical unit tests.\n\n# -----------------------------------------------------------------------------\n# extract\n\nextract:\n\n  # Basic unit test\n  - name: extract\n    params:\n    function: pangwas.extract\n    tags: [\"default\", \"cov\"]\n    args:\n        gff: \"{data_dir}/{sample}.gff3\"\n        min_len: \"{min_len}\"\n        outdir: \"{outdir}\"\n    output:\n        tsv: \"{outdir}/{prefix}.tsv\"\n    variables:   \n        data_dir: \"data/test/gff\"\n        min_len: \"10\"\n        outdir: \"tests/observed/test/extract\"\n        prefix: \"{sample}\"\n        sample:\n        - \"sample1\"\n        - \"sample2\"\n        - \"sample3\"\n        - \"sample4\"\n\n  # Unit test that is expected to fail with a particular error\n  - name: duplicate_contig_error\n    params:\n      tags: [\"cov\"]\n      function: pangwas.extract\n      args:\n        gff: \"{test_data}/{name}.gff3\"\n        outdir: \"{outdir}\"\n        prefix: \"{prefix}\"        \n      error_message: \"Duplicate contig ID found: sample2_pesticin\"\n      variables:\n        outdir: \"tests/observed/test/extract/{name}\"\n        prefix: \"{name}\"\n        test_data: \"tests/data\"\n\n# -----------------------------------------------------------------------------\n# cluster\n\ncluster:\n\n  # run the cluster function with various resources, and check that the\n  # results are the same every single time.\n  - name: reproducible\n    params:\n      tags: [\"reproducible\"]\n      function: pangwas.cluster\n      args:\n        fasta: \"{collect_dir}/sequences.fasta\"\n        outdir: \"{outdir}\"\n        tmp: \"{outdir}/tmp\"\n        memory: \"{memory}\"\n        threads: \"{threads}\"\n      output:\n        clusters: \"{outdir}/clusters.tsv\"\n        representative: \"{outdir}/representative.fasta\"\n      variables:\n        collect_dir: \"tests/observed/test/collect\"\n        outdir: \"tests/observed/test/cluster/t{threads}_mem{memory}\"\n        prefix: \"t{threads}_mem{memory}\"\n        threads:\n          - 1\n          - 2\n          - 4\n        memory:\n          - \"1G\"\n          - \"2G\"\n          - \"4G\""
  },
  {
    "objectID": "manual/align.html",
    "href": "manual/align.html",
    "title": "align",
    "section": "",
    "text": "align"
  },
  {
    "objectID": "manual/binarize.html",
    "href": "manual/binarize.html",
    "title": "binarize",
    "section": "",
    "text": "binarize\nConvert a categorical column to multiple binary (0/1) columns."
  },
  {
    "objectID": "manual/collect.html",
    "href": "manual/collect.html",
    "title": "collect",
    "section": "",
    "text": "collect"
  },
  {
    "objectID": "manual/extract.html",
    "href": "manual/extract.html",
    "title": "extract",
    "section": "",
    "text": "Extract sequences and annotations from GFF files.\n\n\nThe purpose of the extract subcommand is to break up the genome into regions according to the annotations. While many tools offer this functionality, extract is unique in that it will output both the annotated and the unannotated regions.\nThese regions will later be used in the cluster command to identify which parts of the genome should be aligned together for variant calling. If a region is annotated, that contextual information will also be used in the summarize step, to give the cluster informative identifiers and gene/product names.\n\n\n\nThe extract subcommand takes as input a single GFF file of sequence annotations. If the GFF file does not contain the sequences, a separate FASTA file should be additionally be provided.\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample1.gff3\")\npangwas.extract(gff=\"sample1.gff3\", fasta=\"sample1.fasta\")\n\n\npangwas extract --gff sample1.gff3\npangwas extract --gff sample1.gff3 --fasta sample1.fasta\n\n\n\nWhile extract will try to parse the sample identifier from the GFF file name, it’s recommended to manually specify this information:\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample1.gff3\", sample=\"sample1\", prefix=\"sample1\")\n\n\npangwas extract --gff sample1.gff3 --sample sample1 --prefix sample1\n\n\n\n\n\n\n\n\n\ngff: Input GFF annotations.\n\n\n\n\nOptional output parameters:\n\noutdir: Output directory.\nprefix: Output file prefix. If not provided, will be parsed from the gff file name.\n\nOptional parameters:\n\nfasta: Input FASTA sequences, if not provided at the end of the GFF.\nmax-len: Maximum length of sequences to extract (default: 100000).\nmin-len: Minimum length of sequences to extract (default: 20).\nsample: Sample identifier to use. If not provided, is parsed from the gff file name.\nregex: Only extract gff lines that match this regular expression.\n\n\n\n\n\n\n\nThe following is a minimal example of an input GFF file. The only attributes that are required is ID, all others are optional (ex. gene, product, etc.)\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample2.gff3\")\n\n\npangwas extract --gff sample2.gff3\n\n\n\n\nInputOutput\n\n\nsample2_multi   Bakta   region  1   130 .   +   .   ID=sample2_multi\nsample2_multi   Prodigal    CDS 1   36  .   +   0   ID=multi_CDS2\nsample2_multi   Prodigal    CDS 66  101 .   -   0   ID=multi_CDS1;gene=CDS1\n\n##FASTA\n&gt;sample2_multi\nATGCGACGTAGCATGCAGCGCAGCTGAGCATCATAA\nGGATCGATGCATCGGCGATTCACTGCATC\nTTATGATGCTCAGCTGCGCTGCATGCTACGTCGCAT\nGATGCAGTGAATCGCCGATGCATCGATCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsample\ncontig\nlocus\nfeature\nstart\nend\nlength\nstrand\nupstream\ndownstream\nattributes\nsequence_id\nsequence\n\n\n\n\nsample2\nsample2_multi\nsample2_multi_CDS2\nCDS\n1\n36\n36\n+\nsample2_multi_TERMINAL\nsample2_multi_CDS2__sample2_multi_CDS1\nID=multi_CDS2;Name=Fake protein;locus_tag=multi_CDS2;product=Fake protein;gene=multi_CDS2\nsample2_multi_CDS2\nATGCGACGTAGCATGCAGCGCAGCTGAGCATCATAA\n\n\nsample2\nsample2_multi\nsample2_multi_CDS2__sample2_multi_CDS1\nunannotated\n37\n65\n29\n+\nsample2_multi_CDS2\nsample2_multi_CDS1\n\nsample2_multi_CDS2__sample2_multi_CDS1\nGGATCGATGCATCGGCGATTCACTGCATC\n\n\nsample2\nsample2_multi\nsample2_multi_CDS1\nCDS\n66\n101\n36\n-\nsample2_multi_CDS2__sample2_multi_CDS1\nsample2_multi_CDS1__sample2_multi_TERMINAL\nID=multi_CDS1;Name=Fake protein;locus_tag=multi_CDS1;product=Fake protein;gene=multi_CDS1\nsample2_multi_CDS1\nATGCGACGTAGCATGCAGCGCAGCTGAGCATCATAA\n\n\nsample2\nsample2_multi\nsample2_multi_CDS1__sample2_multi_TERMINAL\nunannotated\n102\n130\n29\n-\nsample2_multi_CDS1\nsample2_multi_TERMINAL\n\nsample2_multi_CDS1__sample2_multi_TERMINAL\nGGATCGATGCATCGGCGATTCACTGCATC\n\n\n\n\n\n\n\n\n\n\nThese are real biological sequences that were annotated in the annotate example.\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample1.gff3\")\n\n\npangwas extract --gff sample1.gff3\n\n\n\n\nInputOutput\n\n\n##gff-version 3\n##feature-ontology https://github.com/The-Sequence-Ontology/SO-Ontologies/blob/v3.1/so.obo\n# organism Streptococcus pyogenes\n# Annotated with Bakta\n# Software: v1.9.2\n# Database: v5.1, light\n# DOI: 10.1099/mgen.0.000685\n# URL: github.com/oschwengers/bakta\n##sequence-region sample1_1 1 1457\nsample1_1   Bakta   region  1   1457    .   +   .   ID=sample1_1;Name=sample1_1\nsample1_1   Prodigal    CDS 1   702 .   +   0   ID=AFLIOK_00005;Name=streptococcal mitogenic exotoxin SmeZ;locus_tag=AFLIOK_00005;product=streptococcal mitogenic exotoxin SmeZ;Dbxref=BlastRules:WP_010922705,SO:0001217,UniRef:UniRef50_Q9RQQ5;gene=smeZ\nsample1_1   Prodigal    CDS 744 1457    .   -   0   ID=AFLIOK_00010;Name=streptococcal pyrogenic exotoxin SpeM;locus_tag=AFLIOK_00010;product=streptococcal pyrogenic exotoxin SpeM;Dbxref=BlastRules:WP_011017838,SO:0001217,UniRef:UniRef50_Q8L3E1;gene=speM\n##FASTA\n&gt;sample1_1\nATGAAAAAAACAAAACTTATTTTTTCTTTTACTTCAATATTCATTGCAATAATTTCTCGT\nCCTGTGTTTGGATTAGAAGTAGATAATAATTCCCTTCTAAGGAATATCTATAGTACGATT\nGTGTATGAATATTCAGATACAGTAATTGAGTTTAAAACCAGTCATAACTTAGTGACTAAG\nAAACTTGATGTTAGAGATGCTAGAGATTTTTTTATTAACTCCGAAATGGACGAATATGCA\nGCCAATGATTTTAAAGATGGAGATAAAATAGCTATGTTCTCCGTCCCATTTGATTGGAAC\nTACTTGTCAGAAGGAAAAGTCATAGCATATACGTATGGTGGAATGACGCCTTATCAAGAA\nGAACCAATATCTAAAAATATCCCTGTTAATTTATGGATTAATGGAAAGCAGATCTCTGTT\nCCTTACAACGAAATATCAACTAACAAAACAACAGTTACAGCTCAAGAAATTGATCTAAAG\nGTTAGAAAATTTTTAATATCACAACATCAATTATATTCTTCTGGTTCTAGCTACAAAAGT\nGGTAAATTAGTTTTTCATACAAATGATAATTCAGATAAATATTCTCTCGATCTTTTCTAT\nGTAGGATATAGAGATAAAGAAAGTATTTTTAAAGTATACAAAGACAATAAATCTTTCAAT\nATAGATAAAATTGGGCATTTAGATATAGAAATTGACTCCTAAAGTGACGACATGCTGACT\nGTGCTCTGACGTTGACTGACTGACTAATTTTTAGAAAAATCTTCGTTTAAGTAAATATCA\nAAGTGACTTACTTTACTCATATCAATCGTTTCATTATCTGTATAGTTAGGATGAGTGAAT\nAAATCGGTAAACTTTGTTGTATTATCTTTATAATGAATTCCCCAATACCCTTTTTTACAA\nATTGAGTTATGTTCATATAACTTTATTCTATTATCGCTCATCAAACTTTTCCTAAGTCTA\nACATCAATTTCTTGAAAAGTTACAAACTTATTCTGAAATGTGATTTTATATTTTGATTGC\nTCTTTTAGCGGTATCTGTTCCCCAAAAATATTCATATATATTGTTGAATCAAGTTTCTCT\nCTGTCACTTGTTCTTATCAAACCTCCATCAACATAATTATATTGTTCCTTACATATCACA\nCTGTAGGATTTTATTAGAGCATAAATATCAACTTCTTCTTCCTTAAAGCGTCTTTCTTGC\nGCTGGAGAAACATTGCTAGATATAACTTTATTATAATTATCATCATCCCAGACTCTAGTT\nTTTTCATTCGTGTTAAATATTAACTGGGTGCCAATTTTCTTTGTTATCTTCATATTGGTT\nCTATTAATTACATCTTTCGTATAGATATTTTTTAATTCGCTATTAACCAACACAGCATCT\nGAAAAGACACTCTCAGTAGTGTATAGAGCAAGCGATGCACACACAAGGAATAACAAAGTC\nAAGGTATTTTTTTTCAT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsample\ncontig\nlocus\nfeature\nstart\nend\nlength\nstrand\nupstream\ndownstream\nattributes\nsequence_id\nsequence\n\n\n\n\nsample1\nsample1_1\nsample1_AFLIOK_00005\nCDS\n1\n702\n702\n+\nsample1_1_TERMINAL\nsample1_AFLIOK_00005__sample1_AFLIOK_00010\nID=AFLIOK_00005;Name=streptococcal mitogenic exotoxin SmeZ;locus_tag=AFLIOK_00005;product=streptococcal mitogenic exotoxin SmeZ;Dbxref=BlastRules:WP_010922705,SO:0001217,UniRef:UniRef50_Q9RQQ5;gene=smeZ\nsample1_AFLIOK_00005\nATGAAAAAAACAAAACTTATT…\n\n\nsample1\nsample1_1\nsample1_AFLIOK_00005__sample1_AFLIOK_00010\nunannotated\n703\n743\n41\n+\nsample1_AFLIOK_00005\nsample1_AFLIOK_00010\n\nsample1_AFLIOK_00005__sample1_AFLIOK_00010\nAGTGACGACATGCTGACTGTGCTCTGACGTTGACTGACTGA\n\n\nsample1\nsample1_1\nsample1_AFLIOK_00010\nCDS\n744\n1457\n714\n-\nsample1_AFLIOK_00005__sample1_AFLIOK_00010\nsample1_1_TERMINAL\nID=AFLIOK_00010;Name=streptococcal pyrogenic exotoxin SpeM;locus_tag=AFLIOK_00010;product=streptococcal pyrogenic exotoxin SpeM;Dbxref=BlastRules:WP_011017838,SO:0001217,UniRef:UniRef50_Q8L3E1;gene=speM\nsample1_AFLIOK_00010\nATGAAAAAAAATACCTTGACT…\n\n\n\n\n\n\n\nSome important things to note:\n\nThe locus identifiers have been given a prefix based on the sample identifier.\n\nAFLIOK_00005 -&gt; sample1_AFLIOK_00005\nThis will be a fail-safe against duplicate identifiers from other samples in later steps.\n\nIntergenic sequences are identified based on their upstream/downstream loci.\n\nThe unannotated region between loci AFLIOK_00005 and AFLIOK_00010 is given the identifier sample1_AFLIOK_00005__sample1_AFLIOK_00010, where the __ character is the delimiter.\n\n\n\n\n\nContig coordinates will be identified by either the sequence-region comment line or a feature with the region type:\n\nComment LineFeature\n\n\n##sequence-region sample2_multi 1 130\n\n\nsample2_multi   Bakta   region  1       130     .       +       .       ID=sample2_multi;sample2_multi\n\n\n\n\n\n\nIf duplicate identifiers are found, the sequence regions will be given a numeric suffix (ex. loci.1, loci.2).\n\nInputOutput\n\n\nsample2_dup_gene        Bakta   region  1       120     .       +       .       ID=sample2_dup_gene;sample2_dup_gene\nsample2_dup_gene        Prodigal        CDS     1       30      .       +       0       ID=dup_gene;Name=Duplicate gene name 1;locus_tag=dup_gene;Duplicate gene name 1;gene=dup_gene\nsample2_dup_gene        Prodigal        CDS     61      90      .       +       0       ID=dup_gene;Name=Duplicate gene name 2.1;locus_tag=dup_gene;Duplicate gene name 2.1;gene=dup_gene\nsample2_dup_gene        Prodigal        CDS     91      120     .       +       0       ID=dup_gene;Name=Duplicate gene name 2.2;locus_tag=dup_gene;Duplicate gene name 2.2;gene=dup_gene\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsample\ncontig\nlocus\nfeature\nstart\nend\nlength\nstrand\nupstream\ndownstream\nattributes\nsequence_id\nsequence\n\n\n\n\nsample2\nsample2_dup_gene\nsample2_dup_gene.1\nCDS\n1\n30\n30\n+\nsample2_dup_gene_TERMINAL\nsample2_dup_gene.1__sample2_dup_gene.2\nID=dup_gene;gene=dup_gene\nsample2_dup_gene.1\nGACTATGCACTGCTCGCGCAGATCGTAGCG\n\n\nsample2\nsample2_dup_gene\nsample2_dup_gene.1__sample2_dup_gene.2\nunannotated\n31\n60\n30\n+\nsample2_dup_gene.1\nsample2_dup_gene.2\n\nsample2_dup_gene.1__sample2_dup_gene.2\nATATTATTCGGCATCTGATGTCTGCATGTG\n\n\nsample2\nsample2_dup_gene\nsample2_dup_gene.2\nCDS\n61\n90\n30\n+\nsample2_dup_gene.1__sample2_dup_gene.2\nsample2_dup_gene.3\nID=dup_gene;gene=dup_gene\nsample2_dup_gene.2\nTTTAGAGTGCATGTGCACGGATGCATGCAC\n\n\nsample2\nsample2_dup_gene\nsample2_dup_gene.3\nCDS\n91\n120\n30\n+\nsample2_dup_gene.2\nsample2_dup_gene_TERMINAL\nID=dup_gene;gene=dup_gene\nsample2_dup_gene.3\nTTTAGAGTGCATGTGCACGGATGCATGCAC\n\n\n\n\n\n\n\n\n\n\n\n❗ Using the regex parameter disables the extraction of unnannotated regions.\n\nYou can use the regex parameter to control which sequence regions are extracted. You might want to only extract annotated regions (which contain an ID attribute):\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample1.gff3\", regex=\".*ID=.*\")\n\n\npangwas extract --gff sample1.gff3 --regex \".*ID=.*\"\n\n\n\nOr perhaps just a particular contig of interest:\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample1.gff3\", regex=\"^sample1_pim\")\n\n\npangwas extract --gff sample1.gff3 --regex \"^sample1_pim\"\n\n\n\nOr a selection of genes:\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample1.gff3\", regex=\".*gene=(speG|speB).*\")\n\n\npangwas extract --gff sample1.gff3 --regex \".*gene=(speG|speB).*\""
  },
  {
    "objectID": "manual/extract.html#overview",
    "href": "manual/extract.html#overview",
    "title": "extract",
    "section": "",
    "text": "The purpose of the extract subcommand is to break up the genome into regions according to the annotations. While many tools offer this functionality, extract is unique in that it will output both the annotated and the unannotated regions.\nThese regions will later be used in the cluster command to identify which parts of the genome should be aligned together for variant calling. If a region is annotated, that contextual information will also be used in the summarize step, to give the cluster informative identifiers and gene/product names."
  },
  {
    "objectID": "manual/extract.html#usage",
    "href": "manual/extract.html#usage",
    "title": "extract",
    "section": "",
    "text": "The extract subcommand takes as input a single GFF file of sequence annotations. If the GFF file does not contain the sequences, a separate FASTA file should be additionally be provided.\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample1.gff3\")\npangwas.extract(gff=\"sample1.gff3\", fasta=\"sample1.fasta\")\n\n\npangwas extract --gff sample1.gff3\npangwas extract --gff sample1.gff3 --fasta sample1.fasta\n\n\n\nWhile extract will try to parse the sample identifier from the GFF file name, it’s recommended to manually specify this information:\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample1.gff3\", sample=\"sample1\", prefix=\"sample1\")\n\n\npangwas extract --gff sample1.gff3 --sample sample1 --prefix sample1"
  },
  {
    "objectID": "manual/extract.html#parameters",
    "href": "manual/extract.html#parameters",
    "title": "extract",
    "section": "",
    "text": "gff: Input GFF annotations.\n\n\n\n\nOptional output parameters:\n\noutdir: Output directory.\nprefix: Output file prefix. If not provided, will be parsed from the gff file name.\n\nOptional parameters:\n\nfasta: Input FASTA sequences, if not provided at the end of the GFF.\nmax-len: Maximum length of sequences to extract (default: 100000).\nmin-len: Minimum length of sequences to extract (default: 20).\nsample: Sample identifier to use. If not provided, is parsed from the gff file name.\nregex: Only extract gff lines that match this regular expression."
  },
  {
    "objectID": "manual/extract.html#examples",
    "href": "manual/extract.html#examples",
    "title": "extract",
    "section": "",
    "text": "The following is a minimal example of an input GFF file. The only attributes that are required is ID, all others are optional (ex. gene, product, etc.)\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample2.gff3\")\n\n\npangwas extract --gff sample2.gff3\n\n\n\n\nInputOutput\n\n\nsample2_multi   Bakta   region  1   130 .   +   .   ID=sample2_multi\nsample2_multi   Prodigal    CDS 1   36  .   +   0   ID=multi_CDS2\nsample2_multi   Prodigal    CDS 66  101 .   -   0   ID=multi_CDS1;gene=CDS1\n\n##FASTA\n&gt;sample2_multi\nATGCGACGTAGCATGCAGCGCAGCTGAGCATCATAA\nGGATCGATGCATCGGCGATTCACTGCATC\nTTATGATGCTCAGCTGCGCTGCATGCTACGTCGCAT\nGATGCAGTGAATCGCCGATGCATCGATCC\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsample\ncontig\nlocus\nfeature\nstart\nend\nlength\nstrand\nupstream\ndownstream\nattributes\nsequence_id\nsequence\n\n\n\n\nsample2\nsample2_multi\nsample2_multi_CDS2\nCDS\n1\n36\n36\n+\nsample2_multi_TERMINAL\nsample2_multi_CDS2__sample2_multi_CDS1\nID=multi_CDS2;Name=Fake protein;locus_tag=multi_CDS2;product=Fake protein;gene=multi_CDS2\nsample2_multi_CDS2\nATGCGACGTAGCATGCAGCGCAGCTGAGCATCATAA\n\n\nsample2\nsample2_multi\nsample2_multi_CDS2__sample2_multi_CDS1\nunannotated\n37\n65\n29\n+\nsample2_multi_CDS2\nsample2_multi_CDS1\n\nsample2_multi_CDS2__sample2_multi_CDS1\nGGATCGATGCATCGGCGATTCACTGCATC\n\n\nsample2\nsample2_multi\nsample2_multi_CDS1\nCDS\n66\n101\n36\n-\nsample2_multi_CDS2__sample2_multi_CDS1\nsample2_multi_CDS1__sample2_multi_TERMINAL\nID=multi_CDS1;Name=Fake protein;locus_tag=multi_CDS1;product=Fake protein;gene=multi_CDS1\nsample2_multi_CDS1\nATGCGACGTAGCATGCAGCGCAGCTGAGCATCATAA\n\n\nsample2\nsample2_multi\nsample2_multi_CDS1__sample2_multi_TERMINAL\nunannotated\n102\n130\n29\n-\nsample2_multi_CDS1\nsample2_multi_TERMINAL\n\nsample2_multi_CDS1__sample2_multi_TERMINAL\nGGATCGATGCATCGGCGATTCACTGCATC\n\n\n\n\n\n\n\n\n\n\nThese are real biological sequences that were annotated in the annotate example.\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample1.gff3\")\n\n\npangwas extract --gff sample1.gff3\n\n\n\n\nInputOutput\n\n\n##gff-version 3\n##feature-ontology https://github.com/The-Sequence-Ontology/SO-Ontologies/blob/v3.1/so.obo\n# organism Streptococcus pyogenes\n# Annotated with Bakta\n# Software: v1.9.2\n# Database: v5.1, light\n# DOI: 10.1099/mgen.0.000685\n# URL: github.com/oschwengers/bakta\n##sequence-region sample1_1 1 1457\nsample1_1   Bakta   region  1   1457    .   +   .   ID=sample1_1;Name=sample1_1\nsample1_1   Prodigal    CDS 1   702 .   +   0   ID=AFLIOK_00005;Name=streptococcal mitogenic exotoxin SmeZ;locus_tag=AFLIOK_00005;product=streptococcal mitogenic exotoxin SmeZ;Dbxref=BlastRules:WP_010922705,SO:0001217,UniRef:UniRef50_Q9RQQ5;gene=smeZ\nsample1_1   Prodigal    CDS 744 1457    .   -   0   ID=AFLIOK_00010;Name=streptococcal pyrogenic exotoxin SpeM;locus_tag=AFLIOK_00010;product=streptococcal pyrogenic exotoxin SpeM;Dbxref=BlastRules:WP_011017838,SO:0001217,UniRef:UniRef50_Q8L3E1;gene=speM\n##FASTA\n&gt;sample1_1\nATGAAAAAAACAAAACTTATTTTTTCTTTTACTTCAATATTCATTGCAATAATTTCTCGT\nCCTGTGTTTGGATTAGAAGTAGATAATAATTCCCTTCTAAGGAATATCTATAGTACGATT\nGTGTATGAATATTCAGATACAGTAATTGAGTTTAAAACCAGTCATAACTTAGTGACTAAG\nAAACTTGATGTTAGAGATGCTAGAGATTTTTTTATTAACTCCGAAATGGACGAATATGCA\nGCCAATGATTTTAAAGATGGAGATAAAATAGCTATGTTCTCCGTCCCATTTGATTGGAAC\nTACTTGTCAGAAGGAAAAGTCATAGCATATACGTATGGTGGAATGACGCCTTATCAAGAA\nGAACCAATATCTAAAAATATCCCTGTTAATTTATGGATTAATGGAAAGCAGATCTCTGTT\nCCTTACAACGAAATATCAACTAACAAAACAACAGTTACAGCTCAAGAAATTGATCTAAAG\nGTTAGAAAATTTTTAATATCACAACATCAATTATATTCTTCTGGTTCTAGCTACAAAAGT\nGGTAAATTAGTTTTTCATACAAATGATAATTCAGATAAATATTCTCTCGATCTTTTCTAT\nGTAGGATATAGAGATAAAGAAAGTATTTTTAAAGTATACAAAGACAATAAATCTTTCAAT\nATAGATAAAATTGGGCATTTAGATATAGAAATTGACTCCTAAAGTGACGACATGCTGACT\nGTGCTCTGACGTTGACTGACTGACTAATTTTTAGAAAAATCTTCGTTTAAGTAAATATCA\nAAGTGACTTACTTTACTCATATCAATCGTTTCATTATCTGTATAGTTAGGATGAGTGAAT\nAAATCGGTAAACTTTGTTGTATTATCTTTATAATGAATTCCCCAATACCCTTTTTTACAA\nATTGAGTTATGTTCATATAACTTTATTCTATTATCGCTCATCAAACTTTTCCTAAGTCTA\nACATCAATTTCTTGAAAAGTTACAAACTTATTCTGAAATGTGATTTTATATTTTGATTGC\nTCTTTTAGCGGTATCTGTTCCCCAAAAATATTCATATATATTGTTGAATCAAGTTTCTCT\nCTGTCACTTGTTCTTATCAAACCTCCATCAACATAATTATATTGTTCCTTACATATCACA\nCTGTAGGATTTTATTAGAGCATAAATATCAACTTCTTCTTCCTTAAAGCGTCTTTCTTGC\nGCTGGAGAAACATTGCTAGATATAACTTTATTATAATTATCATCATCCCAGACTCTAGTT\nTTTTCATTCGTGTTAAATATTAACTGGGTGCCAATTTTCTTTGTTATCTTCATATTGGTT\nCTATTAATTACATCTTTCGTATAGATATTTTTTAATTCGCTATTAACCAACACAGCATCT\nGAAAAGACACTCTCAGTAGTGTATAGAGCAAGCGATGCACACACAAGGAATAACAAAGTC\nAAGGTATTTTTTTTCAT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsample\ncontig\nlocus\nfeature\nstart\nend\nlength\nstrand\nupstream\ndownstream\nattributes\nsequence_id\nsequence\n\n\n\n\nsample1\nsample1_1\nsample1_AFLIOK_00005\nCDS\n1\n702\n702\n+\nsample1_1_TERMINAL\nsample1_AFLIOK_00005__sample1_AFLIOK_00010\nID=AFLIOK_00005;Name=streptococcal mitogenic exotoxin SmeZ;locus_tag=AFLIOK_00005;product=streptococcal mitogenic exotoxin SmeZ;Dbxref=BlastRules:WP_010922705,SO:0001217,UniRef:UniRef50_Q9RQQ5;gene=smeZ\nsample1_AFLIOK_00005\nATGAAAAAAACAAAACTTATT…\n\n\nsample1\nsample1_1\nsample1_AFLIOK_00005__sample1_AFLIOK_00010\nunannotated\n703\n743\n41\n+\nsample1_AFLIOK_00005\nsample1_AFLIOK_00010\n\nsample1_AFLIOK_00005__sample1_AFLIOK_00010\nAGTGACGACATGCTGACTGTGCTCTGACGTTGACTGACTGA\n\n\nsample1\nsample1_1\nsample1_AFLIOK_00010\nCDS\n744\n1457\n714\n-\nsample1_AFLIOK_00005__sample1_AFLIOK_00010\nsample1_1_TERMINAL\nID=AFLIOK_00010;Name=streptococcal pyrogenic exotoxin SpeM;locus_tag=AFLIOK_00010;product=streptococcal pyrogenic exotoxin SpeM;Dbxref=BlastRules:WP_011017838,SO:0001217,UniRef:UniRef50_Q8L3E1;gene=speM\nsample1_AFLIOK_00010\nATGAAAAAAAATACCTTGACT…\n\n\n\n\n\n\n\nSome important things to note:\n\nThe locus identifiers have been given a prefix based on the sample identifier.\n\nAFLIOK_00005 -&gt; sample1_AFLIOK_00005\nThis will be a fail-safe against duplicate identifiers from other samples in later steps.\n\nIntergenic sequences are identified based on their upstream/downstream loci.\n\nThe unannotated region between loci AFLIOK_00005 and AFLIOK_00010 is given the identifier sample1_AFLIOK_00005__sample1_AFLIOK_00010, where the __ character is the delimiter.\n\n\n\n\n\nContig coordinates will be identified by either the sequence-region comment line or a feature with the region type:\n\nComment LineFeature\n\n\n##sequence-region sample2_multi 1 130\n\n\nsample2_multi   Bakta   region  1       130     .       +       .       ID=sample2_multi;sample2_multi\n\n\n\n\n\n\nIf duplicate identifiers are found, the sequence regions will be given a numeric suffix (ex. loci.1, loci.2).\n\nInputOutput\n\n\nsample2_dup_gene        Bakta   region  1       120     .       +       .       ID=sample2_dup_gene;sample2_dup_gene\nsample2_dup_gene        Prodigal        CDS     1       30      .       +       0       ID=dup_gene;Name=Duplicate gene name 1;locus_tag=dup_gene;Duplicate gene name 1;gene=dup_gene\nsample2_dup_gene        Prodigal        CDS     61      90      .       +       0       ID=dup_gene;Name=Duplicate gene name 2.1;locus_tag=dup_gene;Duplicate gene name 2.1;gene=dup_gene\nsample2_dup_gene        Prodigal        CDS     91      120     .       +       0       ID=dup_gene;Name=Duplicate gene name 2.2;locus_tag=dup_gene;Duplicate gene name 2.2;gene=dup_gene\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsample\ncontig\nlocus\nfeature\nstart\nend\nlength\nstrand\nupstream\ndownstream\nattributes\nsequence_id\nsequence\n\n\n\n\nsample2\nsample2_dup_gene\nsample2_dup_gene.1\nCDS\n1\n30\n30\n+\nsample2_dup_gene_TERMINAL\nsample2_dup_gene.1__sample2_dup_gene.2\nID=dup_gene;gene=dup_gene\nsample2_dup_gene.1\nGACTATGCACTGCTCGCGCAGATCGTAGCG\n\n\nsample2\nsample2_dup_gene\nsample2_dup_gene.1__sample2_dup_gene.2\nunannotated\n31\n60\n30\n+\nsample2_dup_gene.1\nsample2_dup_gene.2\n\nsample2_dup_gene.1__sample2_dup_gene.2\nATATTATTCGGCATCTGATGTCTGCATGTG\n\n\nsample2\nsample2_dup_gene\nsample2_dup_gene.2\nCDS\n61\n90\n30\n+\nsample2_dup_gene.1__sample2_dup_gene.2\nsample2_dup_gene.3\nID=dup_gene;gene=dup_gene\nsample2_dup_gene.2\nTTTAGAGTGCATGTGCACGGATGCATGCAC\n\n\nsample2\nsample2_dup_gene\nsample2_dup_gene.3\nCDS\n91\n120\n30\n+\nsample2_dup_gene.2\nsample2_dup_gene_TERMINAL\nID=dup_gene;gene=dup_gene\nsample2_dup_gene.3\nTTTAGAGTGCATGTGCACGGATGCATGCAC\n\n\n\n\n\n\n\n\n\n\n\n❗ Using the regex parameter disables the extraction of unnannotated regions.\n\nYou can use the regex parameter to control which sequence regions are extracted. You might want to only extract annotated regions (which contain an ID attribute):\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample1.gff3\", regex=\".*ID=.*\")\n\n\npangwas extract --gff sample1.gff3 --regex \".*ID=.*\"\n\n\n\nOr perhaps just a particular contig of interest:\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample1.gff3\", regex=\"^sample1_pim\")\n\n\npangwas extract --gff sample1.gff3 --regex \"^sample1_pim\"\n\n\n\nOr a selection of genes:\n\nPythonCLI\n\n\npangwas.extract(gff=\"sample1.gff3\", regex=\".*gene=(speG|speB).*\")\n\n\npangwas extract --gff sample1.gff3 --regex \".*gene=(speG|speB).*\""
  },
  {
    "objectID": "manual/heatmap.html",
    "href": "manual/heatmap.html",
    "title": "heatmap",
    "section": "",
    "text": "heatmap\nPlot a heatmap of variants alongside a tree."
  },
  {
    "objectID": "manual/root_tree.html",
    "href": "manual/root_tree.html",
    "title": "root_tree",
    "section": "",
    "text": "root_tree\nRoot tree on outgroup taxa."
  },
  {
    "objectID": "manual/structural.html",
    "href": "manual/structural.html",
    "title": "structural",
    "section": "",
    "text": "structural"
  },
  {
    "objectID": "manual/table_of_contents.html",
    "href": "manual/table_of_contents.html",
    "title": "Manual",
    "section": "",
    "text": "annotate: Annotate genomic assemblies with bakta.\n\n\n\n\n\nextract: Extract sequences and annotations from GFF files.\ncollect: Collect extracted sequences from multiple samples into one file.\ncluster: Cluster nucleotide sequences with mmseqs.\ndefrag: Defrag clusters by associating fragments with their parent cluster.\nsummarize: Summarize clusters according to their annotations.\n\n\n\n\n\nalign: Align clusters using mafft and create a pangenome alignment.\n\n\n\n\n\nstructural: Extract structural variants from cluster alignments.\nsnps: Extract SNPs from a pangenome alignment.\npresence_absence: Extract presence absence of clusters.\n\n\n\n\n\ntree: Estimate a maximum-likelihood tree with IQ-TREE.\n\n\n\n\n\ngwas: Run genome-wide association study (GWAS) tests with pyseer.\n\n\n\n\n\nmanhattan: Plot the distribution of variant p-values across the genome.\nheatmap: Plot a heatmap of variants alongside a tree.\n\n\n\n\n\nroot_tree: Root tree on outgroup taxa.\nbinarize: Convert a categorical column to multiple binary (0/1) columns.\ntable_to_rtab: Convert a TSV/CSV table to an Rtab file based on regex filters.\nvcf_to_rtab: Convert a VCF file to an Rtab file."
  },
  {
    "objectID": "manual/table_of_contents.html#annotate",
    "href": "manual/table_of_contents.html#annotate",
    "title": "Manual",
    "section": "",
    "text": "annotate: Annotate genomic assemblies with bakta."
  },
  {
    "objectID": "manual/table_of_contents.html#cluster",
    "href": "manual/table_of_contents.html#cluster",
    "title": "Manual",
    "section": "",
    "text": "extract: Extract sequences and annotations from GFF files.\ncollect: Collect extracted sequences from multiple samples into one file.\ncluster: Cluster nucleotide sequences with mmseqs.\ndefrag: Defrag clusters by associating fragments with their parent cluster.\nsummarize: Summarize clusters according to their annotations."
  },
  {
    "objectID": "manual/table_of_contents.html#align",
    "href": "manual/table_of_contents.html#align",
    "title": "Manual",
    "section": "",
    "text": "align: Align clusters using mafft and create a pangenome alignment."
  },
  {
    "objectID": "manual/table_of_contents.html#variants",
    "href": "manual/table_of_contents.html#variants",
    "title": "Manual",
    "section": "",
    "text": "structural: Extract structural variants from cluster alignments.\nsnps: Extract SNPs from a pangenome alignment.\npresence_absence: Extract presence absence of clusters."
  },
  {
    "objectID": "manual/table_of_contents.html#tree",
    "href": "manual/table_of_contents.html#tree",
    "title": "Manual",
    "section": "",
    "text": "tree: Estimate a maximum-likelihood tree with IQ-TREE."
  },
  {
    "objectID": "manual/table_of_contents.html#gwas",
    "href": "manual/table_of_contents.html#gwas",
    "title": "Manual",
    "section": "",
    "text": "gwas: Run genome-wide association study (GWAS) tests with pyseer."
  },
  {
    "objectID": "manual/table_of_contents.html#plot",
    "href": "manual/table_of_contents.html#plot",
    "title": "Manual",
    "section": "",
    "text": "manhattan: Plot the distribution of variant p-values across the genome.\nheatmap: Plot a heatmap of variants alongside a tree."
  },
  {
    "objectID": "manual/table_of_contents.html#utility",
    "href": "manual/table_of_contents.html#utility",
    "title": "Manual",
    "section": "",
    "text": "root_tree: Root tree on outgroup taxa.\nbinarize: Convert a categorical column to multiple binary (0/1) columns.\ntable_to_rtab: Convert a TSV/CSV table to an Rtab file based on regex filters.\nvcf_to_rtab: Convert a VCF file to an Rtab file."
  },
  {
    "objectID": "manual/tree.html",
    "href": "manual/tree.html",
    "title": "tree",
    "section": "",
    "text": "tree\nEstimate a maximum-likelihood tree with IQ-TREE."
  },
  {
    "objectID": "pipeline/pipeline.html",
    "href": "pipeline/pipeline.html",
    "title": "Pipeline",
    "section": "",
    "text": "Nextflow\nCommand-Line Interface\nPython Package\n\n\n\n\n\nAn end-to-end pipeline is provided via nextflow. The following command runs the test profile, which is a small synthetic dataset that runs quickly:\nnextflow run . -resume -profile test --trait resistant\nnextflow run . -resume -profile test --trait lineage\npanGWAS provides sensible defaults for each of the tools to get you started. But each step can be extensively customized, such as the following example, which uses custom arguments for clustering (mmseqs), alignment (mafft), and iqtree:\nnextflow run . -resume -profile test --trait lineage \\\n  --cluster_args \"-k 13 --min-seq-id 0.95 -c 0.95\" \\\n  --align_args \"--adjustdirection --localpair --maxiterate 1000 --addfragments\" \\\n  --tree_args \"-safe -m MFP --ufboot 1000 --alrt 1000 -o sample1\"\n\n\n\nInput data is defined in typical nf-core fashion with a samplesheet.csv. It must have at minimum the column sample. If you wish to annotate samples, paths to genomic fasta assemblies should be specified under assembly. If you have your own annotations, provide them under gff. Any missing data or paths should be left empty.\n\n\n\n\n\n\n\n\n\n\n\n\nsample\nassembly\ngff\nlineage\nresistant\nmic\n\n\n\n\nsample1\ndata/test/sequences/sample1.fasta\ndata/test/gff/sample1.gff3\n1\n0\n0.0\n\n\nsample2\ndata/test/sequences/sample2.fasta\ndata/test/gff/sample2.gff3\n2\n0\n\n\n\nsample3\n\ndata/test/gff/sample3.gff3\n2\n1\n2.1\n\n\nsample4\ndata/test/sequences/sample4.fasta\n\n3\n1\n2.9\n\n\n\n\nTo run the samplesheet with defaults, use:\nnextflow run . -resume --input samplesheet.csv --outdir results\nIf you would like to run the GWAS step, you will also need to have column(s) that represent your trait(s) of interest. In this case, we also have traits like resistant and mic which can be analyzed with:\nnextflow run . -resume --input samplesheet.csv --outdir results --trait resistant\nnextflow run . -resume --input samplesheet.csv --outdir results --trait mic --gwas_args \" --continuous\"\nThe variable mic (minimum inhibitory concentration) is a continuous phenotype, so we specify that with the --gwas_args parameter (note the space within the quotations).\n\n\n\nTo see the full list of configurable parameters, run:\nnextflow run . --help\nThese parameters can be configured either at runtime, or within a nextflow config file such as:\nparams {\n  // required paths\n  input  = \"samplesheet.csv\"\n  outdir = \"results/test\"\n\n  // optional: resources\n  max_cpus   = 2\n  max_memory = '8.GB'\n\n  // optional: step configuration\n  extract_args = \"--min-len 10\"\n  snps_args    = \"--core 0.75 --indel-window 3 --snp-window 3\"\n  tree_args    = \"-safe -m MFP --ufboot 1000 --alrt 1000 --seed 123456 -o sample1\"\n  heatmap_args = \"--tree-width 100\"\n}\n\n\n\n\nThe individual modules of the pipeline can be called as CLI commands. This code block is essentially the entirety of the nextflow pipeline.\n# Extract sequence regions, both annotated and unannotated\npangwas extract --gff data/test/gff/sample1.gff3\npangwas extract --gff data/test/gff/sample2.gff3\npangwas extract --gff data/test/gff/sample3.gff3\npangwas extract --gff data/test/gff/sample4.gff3\n\n# Collect sequence regions from all samples\npangwas collect --tsv sample1.tsv sample2.tsv sample3.tsv sample4.tsv --prefix collect\n\n# Cluster sequences\npangwas cluster --fasta collect.sequences.fasta\n\n# Defrag clusters\npangwas defrag --clusters clusters.tsv --representative representative.fasta --prefix defrag\n\n# Summarize clusters\npangwas summarize --clusters clusters.tsv --regions collect.regions.tsv --prefix summarize\n\n# Align clusters\npangwas align --clusters summarize.clusters.tsv --regions collect.regions.tsv\n\n# Call variants\npangwas presence_absence --clusters summarize.clusters.tsv\npangwas structural --clusters summarize.clusters.tsv --alignments alignments\npangwas snps --alignment pangenome.aln --bed pangenome.bed --consensus pangenome.consensus.fasta --structural structural.Rtab\npangwas combine --rtab presence_absence.Rtab structural.Rtab snps.Rtab\n\n# Phylogenetic Tree, using the defaults + some custom iqtree arguments\npangwas tree --alignment snps.core.fasta --constant-sites snps.constant_sites.txt -safe -m MFP --ufboot 1000 --alrt 1000 -o sample1\n\n# GWAS on categorical variable\npangwas gwas --table data/test/samplesheet.csv --column lineage --variants combine.Rtab --tree tree.rooted.nwk --clusters summarize.clusters.tsv\n# GWAS on binary variable\npangwas gwas --table data/test/samplesheet.csv --column resistant --variants combine.Rtab --tree tree.rooted.nwk --clusters summarize.clusters.tsv --lineage-column lineage\n# GWAS on continuous variable\npangwas gwas --table data/test/samplesheet.csv --column mic --variants combine.Rtab --tree tree.rooted.nwk --clusters summarize.clusters.tsv  --lineage-column lineage --continuous\n\n# Manhattan\npangwas manhattan --gwas resistant.locus_effects.significant.tsv --bed pangenome.bed --prefix resistant\npangwas manhattan --gwas lineage_1.locus_effects.significant.tsv --bed pangenome.bed --prefix lineage\npangwas manhattan --gwas mic.locus_effects.significant.tsv --bed pangenome.bed --prefix mic\n\n# Heatmap\npangwas heatmap --gwas resistant.locus_effects.significant.tsv --tree tree.rooted.nwk --prefix resistant\npangwas heatmap --gwas lineage_1.locus_effects.significant.tsv --tree tree.rooted.nwk --prefix lineage\npangwas heatmap --gwas mic.locus_effects.significant.tsv --tree tree.rooted.nwk --prefix mic\n\n\n\nThe individual modules of the pipeline can be called as python functions:\nimport pangwas\n\n# Extract sequence regions, both annotated and unannotated\nsamplesheet = \"data/test/samplesheet.csv\"\nsample1 = pangwas.extract(gff=\"data/test/gff/sample1.gff3\")\nsample2 = pangwas.extract(gff=\"data/test/gff/sample2.gff3\")\nsample3 = pangwas.extract(gff=\"data/test/gff/sample3.gff3\")\nsample4 = pangwas.extract(gff=\"data/test/gff/sample4.gff3\")\n\n# Collect sequence regions\n(fasta, regions) = pangwas.collect(tsv = [sample1, sample2, sample3, sample4], prefix=\"collect\")\n\n# Cluster sequences\n(clusters, representative) = pangwas.cluster(fasta=fasta)\n\n# Defrag clusters\n(clusters, representative) = pangwas.defrag(clusters=clusters, representative=representative, prefix=\"defrag\")\n\n# Summarize clusters\nsummarize = pangwas.summarize(clusters=clusters, regions=regions, prefix=\"summarize\")\n\n# Align clusters\npangwas.align(clusters=summarize, regions=regions)\n\n# Call variants\npresence_absence = pangwas.presence_absence(clusters=summarize)\nstructural       = pangwas.structural(clusters=summarize, alignments=\"alignments\")\nsnps             = pangwas.snps(alignment=\"pangenome.aln\", bed=\"pangenome.bed\", consensus=\"pangenome.consensus.fasta\", structural=structural)\nvariants         = pangwas.combine(rtab=[presence_absence, structural, snps])\n\n# Phylogenetic Tree, using the defaults + some custom iqtree arguments\ntree  = pangwas.tree(alignment=\"snps.core.fasta\", constant_sites=\"snps.constant_sites.txt\", args=pangwas.TREE_ARGS + ' --ufboot 1000 --alrt 1000 -o sample1')\n\n# GWAS on categorical variable\npangwas.gwas(table=samplesheet, column=\"lineage\",   variants=combine, tree=tree, clusters=summarize)\n# GWAS on binary variable\npangwas.gwas(table=samplesheet, column=\"resistant\", variants=combine, tree=tree, clusters=summarize, lineage_column=\"lineage\")\n# GWAS on continuous variable\npangwas.gwas(table=samplesheet, column=\"mic\", variants=variants, tree=tree, clusters=summarize, lineage_column=\"lineage\", continuous=True)\n\n# Manhattan\npangwas.manhattan(gwas=\"resistant.locus_effects.significant.tsv\", bed=\"pangenome.bed\", prefix=\"resistant\")\npangwas.manhattan(gwas=\"lineage_1.locus_effects.significant.tsv\", bed=\"pangenome.bed\", prefix=\"lineage\")\npangwas.manhattan(gwas=\"mic.locus_effects.significant.tsv\",       bed=\"pangenome.bed\", prefix=\"mic\")\n\n# Heatmap\npangwas.heatmap(gwas=\"resistant.locus_effects.significant.tsv\", tree=tree, prefix=\"resistant\")\npangwas.heatmap(gwas=\"lineage_1.locus_effects.significant.tsv\", tree=tree, prefix=\"lineage\")\npangwas.heatmap(gwas=\"mic.locus_effects.significant.tsv\",       tree=tree, prefix=\"mic\")"
  },
  {
    "objectID": "pipeline/pipeline.html#nextflow",
    "href": "pipeline/pipeline.html#nextflow",
    "title": "Pipeline",
    "section": "",
    "text": "An end-to-end pipeline is provided via nextflow. The following command runs the test profile, which is a small synthetic dataset that runs quickly:\nnextflow run . -resume -profile test --trait resistant\nnextflow run . -resume -profile test --trait lineage\npanGWAS provides sensible defaults for each of the tools to get you started. But each step can be extensively customized, such as the following example, which uses custom arguments for clustering (mmseqs), alignment (mafft), and iqtree:\nnextflow run . -resume -profile test --trait lineage \\\n  --cluster_args \"-k 13 --min-seq-id 0.95 -c 0.95\" \\\n  --align_args \"--adjustdirection --localpair --maxiterate 1000 --addfragments\" \\\n  --tree_args \"-safe -m MFP --ufboot 1000 --alrt 1000 -o sample1\"\n\n\n\nInput data is defined in typical nf-core fashion with a samplesheet.csv. It must have at minimum the column sample. If you wish to annotate samples, paths to genomic fasta assemblies should be specified under assembly. If you have your own annotations, provide them under gff. Any missing data or paths should be left empty.\n\n\n\n\n\n\n\n\n\n\n\n\nsample\nassembly\ngff\nlineage\nresistant\nmic\n\n\n\n\nsample1\ndata/test/sequences/sample1.fasta\ndata/test/gff/sample1.gff3\n1\n0\n0.0\n\n\nsample2\ndata/test/sequences/sample2.fasta\ndata/test/gff/sample2.gff3\n2\n0\n\n\n\nsample3\n\ndata/test/gff/sample3.gff3\n2\n1\n2.1\n\n\nsample4\ndata/test/sequences/sample4.fasta\n\n3\n1\n2.9\n\n\n\n\nTo run the samplesheet with defaults, use:\nnextflow run . -resume --input samplesheet.csv --outdir results\nIf you would like to run the GWAS step, you will also need to have column(s) that represent your trait(s) of interest. In this case, we also have traits like resistant and mic which can be analyzed with:\nnextflow run . -resume --input samplesheet.csv --outdir results --trait resistant\nnextflow run . -resume --input samplesheet.csv --outdir results --trait mic --gwas_args \" --continuous\"\nThe variable mic (minimum inhibitory concentration) is a continuous phenotype, so we specify that with the --gwas_args parameter (note the space within the quotations).\n\n\n\nTo see the full list of configurable parameters, run:\nnextflow run . --help\nThese parameters can be configured either at runtime, or within a nextflow config file such as:\nparams {\n  // required paths\n  input  = \"samplesheet.csv\"\n  outdir = \"results/test\"\n\n  // optional: resources\n  max_cpus   = 2\n  max_memory = '8.GB'\n\n  // optional: step configuration\n  extract_args = \"--min-len 10\"\n  snps_args    = \"--core 0.75 --indel-window 3 --snp-window 3\"\n  tree_args    = \"-safe -m MFP --ufboot 1000 --alrt 1000 --seed 123456 -o sample1\"\n  heatmap_args = \"--tree-width 100\"\n}"
  },
  {
    "objectID": "pipeline/pipeline.html#command-line-interface",
    "href": "pipeline/pipeline.html#command-line-interface",
    "title": "Pipeline",
    "section": "",
    "text": "The individual modules of the pipeline can be called as CLI commands. This code block is essentially the entirety of the nextflow pipeline.\n# Extract sequence regions, both annotated and unannotated\npangwas extract --gff data/test/gff/sample1.gff3\npangwas extract --gff data/test/gff/sample2.gff3\npangwas extract --gff data/test/gff/sample3.gff3\npangwas extract --gff data/test/gff/sample4.gff3\n\n# Collect sequence regions from all samples\npangwas collect --tsv sample1.tsv sample2.tsv sample3.tsv sample4.tsv --prefix collect\n\n# Cluster sequences\npangwas cluster --fasta collect.sequences.fasta\n\n# Defrag clusters\npangwas defrag --clusters clusters.tsv --representative representative.fasta --prefix defrag\n\n# Summarize clusters\npangwas summarize --clusters clusters.tsv --regions collect.regions.tsv --prefix summarize\n\n# Align clusters\npangwas align --clusters summarize.clusters.tsv --regions collect.regions.tsv\n\n# Call variants\npangwas presence_absence --clusters summarize.clusters.tsv\npangwas structural --clusters summarize.clusters.tsv --alignments alignments\npangwas snps --alignment pangenome.aln --bed pangenome.bed --consensus pangenome.consensus.fasta --structural structural.Rtab\npangwas combine --rtab presence_absence.Rtab structural.Rtab snps.Rtab\n\n# Phylogenetic Tree, using the defaults + some custom iqtree arguments\npangwas tree --alignment snps.core.fasta --constant-sites snps.constant_sites.txt -safe -m MFP --ufboot 1000 --alrt 1000 -o sample1\n\n# GWAS on categorical variable\npangwas gwas --table data/test/samplesheet.csv --column lineage --variants combine.Rtab --tree tree.rooted.nwk --clusters summarize.clusters.tsv\n# GWAS on binary variable\npangwas gwas --table data/test/samplesheet.csv --column resistant --variants combine.Rtab --tree tree.rooted.nwk --clusters summarize.clusters.tsv --lineage-column lineage\n# GWAS on continuous variable\npangwas gwas --table data/test/samplesheet.csv --column mic --variants combine.Rtab --tree tree.rooted.nwk --clusters summarize.clusters.tsv  --lineage-column lineage --continuous\n\n# Manhattan\npangwas manhattan --gwas resistant.locus_effects.significant.tsv --bed pangenome.bed --prefix resistant\npangwas manhattan --gwas lineage_1.locus_effects.significant.tsv --bed pangenome.bed --prefix lineage\npangwas manhattan --gwas mic.locus_effects.significant.tsv --bed pangenome.bed --prefix mic\n\n# Heatmap\npangwas heatmap --gwas resistant.locus_effects.significant.tsv --tree tree.rooted.nwk --prefix resistant\npangwas heatmap --gwas lineage_1.locus_effects.significant.tsv --tree tree.rooted.nwk --prefix lineage\npangwas heatmap --gwas mic.locus_effects.significant.tsv --tree tree.rooted.nwk --prefix mic"
  },
  {
    "objectID": "pipeline/pipeline.html#python-package",
    "href": "pipeline/pipeline.html#python-package",
    "title": "Pipeline",
    "section": "",
    "text": "The individual modules of the pipeline can be called as python functions:\nimport pangwas\n\n# Extract sequence regions, both annotated and unannotated\nsamplesheet = \"data/test/samplesheet.csv\"\nsample1 = pangwas.extract(gff=\"data/test/gff/sample1.gff3\")\nsample2 = pangwas.extract(gff=\"data/test/gff/sample2.gff3\")\nsample3 = pangwas.extract(gff=\"data/test/gff/sample3.gff3\")\nsample4 = pangwas.extract(gff=\"data/test/gff/sample4.gff3\")\n\n# Collect sequence regions\n(fasta, regions) = pangwas.collect(tsv = [sample1, sample2, sample3, sample4], prefix=\"collect\")\n\n# Cluster sequences\n(clusters, representative) = pangwas.cluster(fasta=fasta)\n\n# Defrag clusters\n(clusters, representative) = pangwas.defrag(clusters=clusters, representative=representative, prefix=\"defrag\")\n\n# Summarize clusters\nsummarize = pangwas.summarize(clusters=clusters, regions=regions, prefix=\"summarize\")\n\n# Align clusters\npangwas.align(clusters=summarize, regions=regions)\n\n# Call variants\npresence_absence = pangwas.presence_absence(clusters=summarize)\nstructural       = pangwas.structural(clusters=summarize, alignments=\"alignments\")\nsnps             = pangwas.snps(alignment=\"pangenome.aln\", bed=\"pangenome.bed\", consensus=\"pangenome.consensus.fasta\", structural=structural)\nvariants         = pangwas.combine(rtab=[presence_absence, structural, snps])\n\n# Phylogenetic Tree, using the defaults + some custom iqtree arguments\ntree  = pangwas.tree(alignment=\"snps.core.fasta\", constant_sites=\"snps.constant_sites.txt\", args=pangwas.TREE_ARGS + ' --ufboot 1000 --alrt 1000 -o sample1')\n\n# GWAS on categorical variable\npangwas.gwas(table=samplesheet, column=\"lineage\",   variants=combine, tree=tree, clusters=summarize)\n# GWAS on binary variable\npangwas.gwas(table=samplesheet, column=\"resistant\", variants=combine, tree=tree, clusters=summarize, lineage_column=\"lineage\")\n# GWAS on continuous variable\npangwas.gwas(table=samplesheet, column=\"mic\", variants=variants, tree=tree, clusters=summarize, lineage_column=\"lineage\", continuous=True)\n\n# Manhattan\npangwas.manhattan(gwas=\"resistant.locus_effects.significant.tsv\", bed=\"pangenome.bed\", prefix=\"resistant\")\npangwas.manhattan(gwas=\"lineage_1.locus_effects.significant.tsv\", bed=\"pangenome.bed\", prefix=\"lineage\")\npangwas.manhattan(gwas=\"mic.locus_effects.significant.tsv\",       bed=\"pangenome.bed\", prefix=\"mic\")\n\n# Heatmap\npangwas.heatmap(gwas=\"resistant.locus_effects.significant.tsv\", tree=tree, prefix=\"resistant\")\npangwas.heatmap(gwas=\"lineage_1.locus_effects.significant.tsv\", tree=tree, prefix=\"lineage\")\npangwas.heatmap(gwas=\"mic.locus_effects.significant.tsv\",       tree=tree, prefix=\"mic\")"
  },
  {
    "objectID": "tutorials/02_strep_pnuemo.html",
    "href": "tutorials/02_strep_pnuemo.html",
    "title": "Tutorial 02 - Streptococcus pneumoniae",
    "section": "",
    "text": "Tutorial 02 - Streptococcus pneumoniae\n\nRun the test data through a GWAS on the trait penicillin.\nnextflow run phac-nml/pangwas -profile streptococcus_pneumoniae --trait penicillin"
  },
  {
    "objectID": "tutorials/tutorials.html",
    "href": "tutorials/tutorials.html",
    "title": "Tutorials",
    "section": "",
    "text": "Tutorials\n\nTutorial 01 - Test\nTutorial 02 - Streptococcus pneumoniae\nTutorial 03 - Pyseer tutorial"
  }
]